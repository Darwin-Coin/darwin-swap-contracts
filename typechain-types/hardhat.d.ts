/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AntiDumpGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AntiDumpGuard__factory>;
    getContractFactory(
      name: "DarwinLiquidityBundles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinLiquidityBundles__factory>;
    getContractFactory(
      name: "DarwinNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinNFT__factory>;
    getContractFactory(
      name: "DarwinStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinStaking__factory>;
    getContractFactory(
      name: "DarwinSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinSwapERC20__factory>;
    getContractFactory(
      name: "DarwinSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinSwapFactory__factory>;
    getContractFactory(
      name: "DarwinSwapLister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinSwapLister__factory>;
    getContractFactory(
      name: "DarwinSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinSwapPair__factory>;
    getContractFactory(
      name: "DarwinSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinSwapRouter__factory>;
    getContractFactory(
      name: "EvoturesNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EvoturesNFT__factory>;
    getContractFactory(
      name: "IAntiDumpGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAntiDumpGuard__factory>;
    getContractFactory(
      name: "IDarwinLiquidityBundles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinLiquidityBundles__factory>;
    getContractFactory(
      name: "IDarwinStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinStaking__factory>;
    getContractFactory(
      name: "IDarwinSwapCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapCallee__factory>;
    getContractFactory(
      name: "IDarwinSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapERC20__factory>;
    getContractFactory(
      name: "IDarwinSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapFactory__factory>;
    getContractFactory(
      name: "IDarwinSwapLister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapLister__factory>;
    getContractFactory(
      name: "IDarwinSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapPair__factory>;
    getContractFactory(
      name: "IDarwinSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinSwapRouter__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IEvoturesNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEvoturesNFT__factory>;
    getContractFactory(
      name: "ILootboxTicket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILootboxTicket__factory>;
    getContractFactory(
      name: "IDarwinMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwinMasterChef__factory>;
    getContractFactory(
      name: "ITokenLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenLocker__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "Tokenomics2Library",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tokenomics2Library__factory>;
    getContractFactory(
      name: "LootboxTicket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LootboxTicket__factory>;
    getContractFactory(
      name: "DarwinMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DarwinMasterChef__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TokenLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLocker__factory>;
    getContractFactory(
      name: "IDarwin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDarwin__factory>;
    getContractFactory(
      name: "IStakedDarwin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedDarwin__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AntiDumpGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AntiDumpGuard>;
    getContractAt(
      name: "DarwinLiquidityBundles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinLiquidityBundles>;
    getContractAt(
      name: "DarwinNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinNFT>;
    getContractAt(
      name: "DarwinStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinStaking>;
    getContractAt(
      name: "DarwinSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinSwapERC20>;
    getContractAt(
      name: "DarwinSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinSwapFactory>;
    getContractAt(
      name: "DarwinSwapLister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinSwapLister>;
    getContractAt(
      name: "DarwinSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinSwapPair>;
    getContractAt(
      name: "DarwinSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinSwapRouter>;
    getContractAt(
      name: "EvoturesNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EvoturesNFT>;
    getContractAt(
      name: "IAntiDumpGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAntiDumpGuard>;
    getContractAt(
      name: "IDarwinLiquidityBundles",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinLiquidityBundles>;
    getContractAt(
      name: "IDarwinStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinStaking>;
    getContractAt(
      name: "IDarwinSwapCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapCallee>;
    getContractAt(
      name: "IDarwinSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapERC20>;
    getContractAt(
      name: "IDarwinSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapFactory>;
    getContractAt(
      name: "IDarwinSwapLister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapLister>;
    getContractAt(
      name: "IDarwinSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapPair>;
    getContractAt(
      name: "IDarwinSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinSwapRouter>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IEvoturesNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEvoturesNFT>;
    getContractAt(
      name: "ILootboxTicket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILootboxTicket>;
    getContractAt(
      name: "IDarwinMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwinMasterChef>;
    getContractAt(
      name: "ITokenLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenLocker>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "FixedPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPoint>;
    getContractAt(
      name: "Tokenomics2Library",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Tokenomics2Library>;
    getContractAt(
      name: "LootboxTicket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LootboxTicket>;
    getContractAt(
      name: "DarwinMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DarwinMasterChef>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TokenLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLocker>;
    getContractAt(
      name: "IDarwin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDarwin>;
    getContractAt(
      name: "IStakedDarwin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedDarwin>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
