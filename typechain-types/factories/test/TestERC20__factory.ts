/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TestERC20, TestERC20Interface } from "../../test/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a2f38038062000a2f83398101604081905262000034916200029a565b600080546001600160a01b0319163317905581516200005b90600190602085019062000127565b5080516200007190600290602084019062000127565b50620000883369d3c21bcecceda100000062000090565b505062000367565b80600354620000a0919062000304565b6003556001600160a01b038216600090815260046020526040902054620000c990829062000304565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200011b9085815260200190565b60405180910390a35050565b82805462000135906200032b565b90600052602060002090601f016020900481019282620001595760008555620001a4565b82601f106200017457805160ff1916838001178555620001a4565b82800160010185558215620001a4579182015b82811115620001a457825182559160200191906001019062000187565b50620001b2929150620001b6565b5090565b5b80821115620001b25760008155600101620001b7565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f557600080fd5b81516001600160401b0380821115620002125762000212620001cd565b604051601f8301601f19908116603f011681019082821181831017156200023d576200023d620001cd565b816040528381526020925086838588010111156200025a57600080fd5b600091505b838210156200027e57858201830151818301840152908201906200025f565b83821115620002905760008385830101525b9695505050505050565b60008060408385031215620002ae57600080fd5b82516001600160401b0380821115620002c657600080fd5b620002d486838701620001e3565b93506020850151915080821115620002eb57600080fd5b50620002fa85828601620001e3565b9150509250929050565b600082198211156200032657634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200034057607f821691505b6020821081036200036157634e487b7160e01b600052602260045260246000fd5b50919050565b6106b880620003776000396000f3fe6080604052600436106100a05760003560e01c806370a082311161006457806370a082311461017a5780638da5cb5b146101a757806395d89b41146101df578063a9059cbb146101f4578063d0e30db014610214578063dd62ed3e1461021c57600080fd5b806306fdde03146100b4578063095ea7b3146100df57806318160ddd1461010f57806323b872dd14610133578063313ce5671461015357600080fd5b366100af576100ad610254565b005b600080fd5b3480156100c057600080fd5b506100c961027a565b6040516100d691906104d7565b60405180910390f35b3480156100eb57600080fd5b506100ff6100fa366004610548565b610308565b60405190151581526020016100d6565b34801561011b57600080fd5b5061012560035481565b6040519081526020016100d6565b34801561013f57600080fd5b506100ff61014e366004610572565b61031e565b34801561015f57600080fd5b50610168601281565b60405160ff90911681526020016100d6565b34801561018657600080fd5b506101256101953660046105ae565b60046020526000908152604090205481565b3480156101b357600080fd5b506000546101c7906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b3480156101eb57600080fd5b506100c96103b3565b34801561020057600080fd5b506100ff61020f366004610548565b6103c0565b6100ad610254565b34801561022857600080fd5b506101256102373660046105d0565b600560209081526000928352604080842090915290825290205481565b3360009081526004602052604081208054349290610273908490610619565b9091555050565b6001805461028790610631565b80601f01602080910402602001604051908101604052809291908181526020018280546102b390610631565b80156103005780601f106102d557610100808354040283529160200191610300565b820191906000526020600020905b8154815290600101906020018083116102e357829003601f168201915b505050505081565b60006103153384846103cd565b50600192915050565b6001600160a01b03831660009081526005602090815260408083203384529091528120546000191461039e576001600160a01b038416600090815260056020908152604080832033845290915290205461037990839061066b565b6001600160a01b03851660009081526005602090815260408083203384529091529020555b6103a984848461042f565b5060019392505050565b6002805461028790610631565b600061031533848461042f565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526004602052604090205461045390829061066b565b6001600160a01b038085166000908152600460205260408082209390935590841681522054610483908290610619565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104229085815260200190565b600060208083528351808285015260005b81811015610504578581018301518582016040015282016104e8565b81811115610516576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461054357600080fd5b919050565b6000806040838503121561055b57600080fd5b6105648361052c565b946020939093013593505050565b60008060006060848603121561058757600080fd5b6105908461052c565b925061059e6020850161052c565b9150604084013590509250925092565b6000602082840312156105c057600080fd5b6105c98261052c565b9392505050565b600080604083850312156105e357600080fd5b6105ec8361052c565b91506105fa6020840161052c565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561062c5761062c610603565b500190565b600181811c9082168061064557607f821691505b60208210810361066557634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561067d5761067d610603565b50039056fea2646970667358221220e79b0a80598386a4869b34f1ac560dfb286a4932c388e0223552d553979d7a6964736f6c634300080e0033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
