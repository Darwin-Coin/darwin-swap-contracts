/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LiquidityInjector,
  LiquidityInjectorInterface,
} from "../../contracts/LiquidityInjector";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenSold",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenBought",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountSold",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountBought",
        type: "uint256",
      },
    ],
    name: "BuyBackAndPair",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_sellToken",
        type: "address",
      },
    ],
    name: "buyBackAndPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IDarwinSwapFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lister",
    outputs: [
      {
        internalType: "contract IDarwinSwapLister",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "contract IDarwinSwapPair",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IDarwinSwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503360805260805161116361004c60003960008181610166015281816101f30152818161029b0152818161034301526103eb01526111636000f3fe60806040526004361061008a5760003560e01c8063c0c53b8b11610059578063c0c53b8b14610132578063c45a015514610154578063d21220a714610188578063d3366388146101a8578063f887ea40146101c857600080fd5b80630dfe1681146100965780632cdc1c74146100d257806391cca3db146100f2578063a8aa1b311461011257600080fd5b3661009157005b600080fd5b3480156100a257600080fd5b506004546100b6906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100de57600080fd5b506002546100b6906001600160a01b031681565b3480156100fe57600080fd5b506003546100b6906001600160a01b031681565b34801561011e57600080fd5b506000546100b6906001600160a01b031681565b34801561013e57600080fd5b5061015261014d366004610cd1565b6101e8565b005b34801561016057600080fd5b506100b67f000000000000000000000000000000000000000000000000000000000000000081565b34801561019457600080fd5b506005546100b6906001600160a01b031681565b3480156101b457600080fd5b506101526101c3366004610d1c565b61068a565b3480156101d457600080fd5b506001546100b6906001600160a01b031681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102735760405162461bcd60e51b815260206004820152602560248201527f4c6971756964697479496e6a6563746f723a2043414c4c45525f4e4f545f464160448201526443544f525960d81b60648201526084015b60405180910390fd5b826000806101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b9190610d50565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632cdc1c746040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190610d50565b600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391cca3db6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190610d50565b600380546001600160a01b03199081166001600160a01b03938416179091556004805482168584169081178255600580549093168585161790925560015460405163095ea7b360e01b815293169083015260001960248301529063095ea7b3906044016020604051808303816000875af11580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190610d7d565b5060055460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190610d7d565b506004805460005460405163095ea7b360e01b81526001600160a01b03918216938101939093526000196024840152169063095ea7b3906044016020604051808303816000875af11580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190610d7d565b5060055460005460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106849190610d7d565b50505050565b6003546001600160a01b031633148061072f57506002546004805460405163f5dab71160e01b81526001600160a01b03918216928101929092529091169063f5dab71190602401600060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107169190810190610fcc565b608001516001600160a01b0316336001600160a01b0316145b806107c2575060025460055460405163f5dab71160e01b81526001600160a01b03918216600482015291169063f5dab71190602401600060405180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a99190810190610fcc565b608001516001600160a01b0316336001600160a01b0316145b6108265760405162461bcd60e51b815260206004820152602f60248201527f4c6971756964697479496e6a6563746f723a2043414c4c45525f4e4f545f544f60448201526e25a2a72faa22a0a6afa7a92fa222ab60891b606482015260840161026a565b6005546000906001600160a01b0383811691161461084f576005546001600160a01b031661085c565b6004546001600160a01b03165b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c791906110cc565b60000361094c576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906110cc565b1115610948576109488161068a565b5050565b60025460405163f5dab71160e01b81526001600160a01b038481166004830152600092169063f5dab71190602401600060405180830381865afa158015610997573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109bf9190810190610fcc565b60208101516101a081015161018082015161016083015161014090930151939450909290916109ed916110e5565b6109f791906110e5565b610a0191906110e5565b600003610a0d57505050565b6000546040516370a0823160e01b81523060048201526001600160a01b039182169163a87db923918591600291908316906370a0823190602401602060405180830381865afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8891906110cc565b610a92919061110b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ad857600080fd5b505af1158015610aec573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b91906110cc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906110cc565b6001549091506001600160a01b0316639d6fdd9386868585610bed426102586110e5565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482015260a401600060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b5050604080516001600160a01b03808916825289166020820152908101849052606081018590527fd76c14b65d892518c063a34134624fca1ed5d6108e326bd744fd7e29e2ccd75d9250608001905060405180910390a1505050505b50565b6001600160a01b0381168114610cb957600080fd5b600080600060608486031215610ce657600080fd5b8335610cf181610cbc565b92506020840135610d0181610cbc565b91506040840135610d1181610cbc565b809150509250925092565b600060208284031215610d2e57600080fd5b8135610d3981610cbc565b9392505050565b8051610d4b81610cbc565b919050565b600060208284031215610d6257600080fd5b8151610d3981610cbc565b80518015158114610d4b57600080fd5b600060208284031215610d8f57600080fd5b610d3982610d6d565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715610dd257610dd2610d98565b60405290565b604051610120810167ffffffffffffffff81118282101715610dd257610dd2610d98565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2557610e25610d98565b604052919050565b600060408284031215610e3f57600080fd5b6040516040810181811067ffffffffffffffff82111715610e6257610e62610d98565b604052825181526020928301519281019290925250919050565b60006101c08284031215610e8f57600080fd5b610e97610dae565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b805160038110610d4b57600080fd5b600082601f830112610f5157600080fd5b815167ffffffffffffffff811115610f6b57610f6b610d98565b6020610f7f601f8301601f19168201610dfc565b8281528582848701011115610f9357600080fd5b60005b83811015610fb1578581018301518282018401528201610f96565b83811115610fc25760008385840101525b5095945050505050565b600060208284031215610fde57600080fd5b815167ffffffffffffffff80821115610ff657600080fd5b908301906102e0828603121561100b57600080fd5b611013610dd8565b61101d8684610e2d565b815261102c8660408501610e7c565b602082015261103e6102008401610f31565b60408201526110506102208401610d40565b60608201526110626102408401610d40565b60808201526110746102608401610d40565b60a08201526110866102808401610d6d565b60c08201526110986102a08401610d6d565b60e08201526102c0830151828111156110b057600080fd5b6110bc87828601610f40565b6101008301525095945050505050565b6000602082840312156110de57600080fd5b5051919050565b6000821982111561110657634e487b7160e01b600052601160045260246000fd5b500190565b60008261112857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200e455fa6b88ed3ba0bcad180c90dd539ed8686ee47f193189e792d2e7a46388f64736f6c634300080e0033";

type LiquidityInjectorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityInjectorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityInjector__factory extends ContractFactory {
  constructor(...args: LiquidityInjectorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidityInjector> {
    return super.deploy(overrides || {}) as Promise<LiquidityInjector>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LiquidityInjector {
    return super.attach(address) as LiquidityInjector;
  }
  override connect(signer: Signer): LiquidityInjector__factory {
    return super.connect(signer) as LiquidityInjector__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityInjectorInterface {
    return new utils.Interface(_abi) as LiquidityInjectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityInjector {
    return new Contract(address, _abi, signerOrProvider) as LiquidityInjector;
  }
}
