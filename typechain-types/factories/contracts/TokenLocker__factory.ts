/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenLocker,
  TokenLockerInterface,
} from "../../contracts/TokenLocker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIncreased",
        type: "uint256",
      },
    ],
    name: "LockAmountIncreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "durationIncreased",
        type: "uint256",
      },
    ],
    name: "LockDurationIncreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "TokenLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenWithdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "lockToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "masterChef",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "userLockedToken",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "locker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ITokenLocker.LockedToken",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5033608052608051610f396100366000396000818160bb01526107010152610f396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806301e336671461005157806340cd6ad814610066578063575a86b2146100b6578063e4ddc77c14610102575b600080fd5b61006461005f366004610db2565b610115565b005b610079610074366004610dee565b610529565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020808401519082015291810151908201526060015b60405180910390f35b6100dd7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ad565b610064610110366004610e21565b6105bd565b60015460ff1615610187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f546f6b656e4c6f636b65723a205245454e5452414e545f43414c4c000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168117905580156104fc5773ffffffffffffffffffffffffffffffffffffffff8381166000908152602081815260408083208685168452909152902054163314610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546f6b656e4c6f636b65723a20464f5242494444454e5f574954484452415700604482015260640161017e565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320938616835292905220600101544210156102ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546f6b656e4c6f636b65723a20544f4b454e5f5354494c4c5f4c4f434b454400604482015260640161017e565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320938616835292905220600201548111156103b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f546f6b656e4c6f636b65723a20414d4f554e545f455843454544535f4c4f434b60448201527f45445f414d4f554e540000000000000000000000000000000000000000000000606482015260840161017e565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320938616835292905290812060020180548392906103f7908490610e92565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb906044016020604051808303816000875af115801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190610ea9565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e5620836040516104f391815260200190565b60405180910390a35b5050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905550565b6105636040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b5073ffffffffffffffffffffffffffffffffffffffff918216600090815260208181526040808320938516835292815290829020825160608101845281549094168452600181015491840191909152600201549082015290565b60015460ff161561062a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f546f6b656e4c6f636b65723a205245454e5452414e545f43414c4c0000000000604482015260640161017e565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168117905573ffffffffffffffffffffffffffffffffffffffff848116600090815260208181526040808320878516845290915290205416331480610723575073ffffffffffffffffffffffffffffffffffffffff84811660009081526020818152604080832087851684529091529020541615801561072357503373ffffffffffffffffffffffffffffffffffffffff8516148061072357503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546f6b656e4c6f636b65723a20464f5242494444454e5f574954484452415700604482015260640161017e565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152829073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190610ed2565b10156108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f546f6b656e4c6f636b65723a20414d4f554e545f455843454544535f42414c4160448201527f4e43450000000000000000000000000000000000000000000000000000000000606482015260840161017e565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020818152604080832093871683529290522060020154156109075781156108f1576108f1848484610ac9565b801561090257610902848483610c1d565b610a9b565b8115610a9b576040805160608101909152338152602081016109298342610eeb565b8152602090810184905273ffffffffffffffffffffffffffffffffffffffff8681166000908152808352604080822088841680845290855291819020855181547fffffffffffffffffffffffff000000000000000000000000000000000000000016941693909317835592840151600183015592820151600290910155517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526323b872dd906064016020604051808303816000875af1158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a299190610ea9565b508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fd8a1c0afefbfb5f6da58761715434130bcc1b9da12dba1ab5b21e44f5ae4d27e8484604051610a92929190918252602082015260400190565b60405180910390a35b5050600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555050565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526020818152604080832093861683529290529081206002018054839290610b0e908490610eeb565b90915550506040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd906064016020604051808303816000875af1158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190610ea9565b508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc29cac6236e8da5d246512d294d5c8acafa6ef6749bada322436fd5aa0035aba83604051610c1091815260200190565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320938616835292905220600101544211610ca75773ffffffffffffffffffffffffffffffffffffffff80841660009081526020818152604080832093861683529290529081206001018054839290610c9c908490610eeb565b90915550610d3f9050565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526020818152604080832093861683529290522060010154610ce59042610e92565b610cef9082610eeb565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208181526040808320938716835292905290812060010180549293508392909190610d39908490610eeb565b90915550505b60405181815273ffffffffffffffffffffffffffffffffffffffff83169033907f911f18b1e1f865755f534116d21376c06433c2c26ad6b5763ab80328682c036490602001610c10565b803573ffffffffffffffffffffffffffffffffffffffff81168114610dad57600080fd5b919050565b600080600060608486031215610dc757600080fd5b610dd084610d89565b9250610dde60208501610d89565b9150604084013590509250925092565b60008060408385031215610e0157600080fd5b610e0a83610d89565b9150610e1860208401610d89565b90509250929050565b60008060008060808587031215610e3757600080fd5b610e4085610d89565b9350610e4e60208601610d89565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610ea457610ea4610e63565b500390565b600060208284031215610ebb57600080fd5b81518015158114610ecb57600080fd5b9392505050565b600060208284031215610ee457600080fd5b5051919050565b60008219821115610efe57610efe610e63565b50019056fea26469706673582212206ea801fd6c2e89ade7e79c9e476c6c27f9a3626bcac9f5572ab356bd2fd6019f64736f6c634300080e0033";

type TokenLockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenLockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenLocker__factory extends ContractFactory {
  constructor(...args: TokenLockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenLocker> {
    return super.deploy(overrides || {}) as Promise<TokenLocker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenLocker {
    return super.attach(address) as TokenLocker;
  }
  override connect(signer: Signer): TokenLocker__factory {
    return super.connect(signer) as TokenLocker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenLockerInterface {
    return new utils.Interface(_abi) as TokenLockerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenLocker {
    return new Contract(address, _abi, signerOrProvider) as TokenLocker;
  }
}
