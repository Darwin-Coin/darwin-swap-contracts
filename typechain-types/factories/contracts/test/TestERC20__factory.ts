/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/test/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_mintTo",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_SUPPLY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f2e38038062000f2e83398101604081905262000034916200029b565b600080546001600160a01b0319163317905582516200005b90600190602086019062000128565b5081516200007190600290602085019062000128565b50620000888169d3c21bcecceda100000062000091565b5050506200038b565b80600354620000a1919062000328565b6003556001600160a01b038216600090815260046020526040902054620000ca90829062000328565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200011c9085815260200190565b60405180910390a35050565b82805462000136906200034f565b90600052602060002090601f0160209004810192826200015a5760008555620001a5565b82601f106200017557805160ff1916838001178555620001a5565b82800160010185558215620001a5579182015b82811115620001a557825182559160200191906001019062000188565b50620001b3929150620001b7565b5090565b5b80821115620001b35760008155600101620001b8565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f657600080fd5b81516001600160401b0380821115620002135762000213620001ce565b604051601f8301601f19908116603f011681019082821181831017156200023e576200023e620001ce565b816040528381526020925086838588010111156200025b57600080fd5b600091505b838210156200027f578582018301518183018401529082019062000260565b83821115620002915760008385830101525b9695505050505050565b600080600060608486031215620002b157600080fd5b83516001600160401b0380821115620002c957600080fd5b620002d787838801620001e4565b94506020860151915080821115620002ee57600080fd5b50620002fd86828701620001e4565b604086015190935090506001600160a01b03811681146200031d57600080fd5b809150509250925092565b600082198211156200034a57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200036457607f821691505b6020821081036200038557634e487b7160e01b600052602260045260246000fd5b50919050565b610b93806200039b6000396000f3fe6080604052600436106100ec5760003560e01c806340c10f191161008a578063a9059cbb11610059578063a9059cbb146102bb578063d0e30db0146102db578063dd62ed3e146102e3578063f2fde38b1461031b57600080fd5b806340c10f191461020757806370a08231146102275780638da5cb5b1461025457806395d89b41146102a657600080fd5b806323b872dd116100c657806323b872dd1461017f5780632e1a7d4d1461019f578063313ce567146101bf57806332cb6b0c146101e657600080fd5b806306fdde0314610100578063095ea7b31461012b57806318160ddd1461015b57600080fd5b366100fb576100f961033b565b005b600080fd5b34801561010c57600080fd5b50610115610361565b604051610122919061093c565b60405180910390f35b34801561013757600080fd5b5061014b6101463660046109d8565b6103ef565b6040519015158152602001610122565b34801561016757600080fd5b5061017160035481565b604051908152602001610122565b34801561018b57600080fd5b5061014b61019a366004610a02565b610405565b3480156101ab57600080fd5b506100f96101ba366004610a3e565b6104df565b3480156101cb57600080fd5b506101d4601281565b60405160ff9091168152602001610122565b3480156101f257600080fd5b506101716c0c9f2c9cd04674edea4000000081565b34801561021357600080fd5b5061014b6102223660046109d8565b6105e4565b34801561023357600080fd5b50610171610242366004610a57565b60046020526000908152604090205481565b34801561026057600080fd5b506000546102819073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b3480156102b257600080fd5b50610115610670565b3480156102c757600080fd5b5061014b6102d63660046109d8565b61067d565b6100f961033b565b3480156102ef57600080fd5b506101716102fe366004610a79565b600560209081526000928352604080842090915290825290205481565b34801561032757600080fd5b506100f9610336366004610a57565b61068a565b336000908152600460205260408120805434929061035a908490610adb565b9091555050565b6001805461036e90610af3565b80601f016020809104026020016040519081016040528092919081815260200182805461039a90610af3565b80156103e75780601f106103bc576101008083540402835291602001916103e7565b820191906000526020600020905b8154815290600101906020018083116103ca57829003601f168201915b505050505081565b60006103fc338484610752565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146104ca5773ffffffffffffffffffffffffffffffffffffffff84166000908152600560209081526040808320338452909152902054610498908390610b46565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005602090815260408083203384529091529020555b6104d58484846107c1565b5060019392505050565b33600090815260046020526040812080548392906104fe908490610b46565b9091555050604051600090339083908381818185875af1925050503d8060008114610545576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b606091505b50509050806105e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5465737445524332303a3a77697468647261773a20545241534e4645525f455460448201527f485f4552524f520000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5465737445524332303a2043414c4c45525f4e4f545f4f574e4552000000000060448201526064016105d7565b6103fc8383610890565b6002805461036e90610af3565b60006103fc3384846107c1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461070b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5465737445524332303a2043414c4c45525f4e4f545f4f574e4552000000000060448201526064016105d7565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020546107f2908290610b46565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260046020526040808220939093559084168152205461082f908290610adb565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107b49085815260200190565b8060035461089e9190610adb565b60035573ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546108d2908290610adb565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109309085815260200190565b60405180910390a35050565b600060208083528351808285015260005b818110156109695785810183015185820160400152820161094d565b8181111561097b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109d357600080fd5b919050565b600080604083850312156109eb57600080fd5b6109f4836109af565b946020939093013593505050565b600080600060608486031215610a1757600080fd5b610a20846109af565b9250610a2e602085016109af565b9150604084013590509250925092565b600060208284031215610a5057600080fd5b5035919050565b600060208284031215610a6957600080fd5b610a72826109af565b9392505050565b60008060408385031215610a8c57600080fd5b610a95836109af565b9150610aa3602084016109af565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610aee57610aee610aac565b500190565b600181811c90821680610b0757607f821691505b602082108103610b40577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600082821015610b5857610b58610aac565b50039056fea26469706673582212208e12e56e337840557a83843132b675e66ac575d906823f5f0efc7e5eef71722764736f6c634300080e0033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _mintTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      _name,
      _symbol,
      _mintTo,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _mintTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _mintTo, overrides || {});
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
