/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AntiDumpGuard,
  AntiDumpGuardInterface,
} from "../../contracts/AntiDumpGuard";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenSold",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenBought",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountSold",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountBought",
        type: "uint256",
      },
    ],
    name: "BuyBackAndPair",
    type: "event",
  },
  {
    inputs: [],
    name: "USD",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sellToken",
        type: "address",
      },
    ],
    name: "buyBackAndPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IDarwinSwapFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lister",
    outputs: [
      {
        internalType: "contract IDarwinSwapLister",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "contract IDarwinSwapPair",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IDarwinSwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50336080526080516112d16100536000396000818161016f0152818161021e015281816102c20152818161036a0152818161041201526104ba01526112d16000f3fe6080604052600436106100955760003560e01c8063c45a015511610059578063c45a01551461015d578063c4d66de814610191578063d21220a7146101b3578063d3366388146101d3578063f887ea40146101f357600080fd5b80630dfe1681146100a15780631bf6c21b146100dd5780632cdc1c74146100fd57806391cca3db1461011d578063a8aa1b311461013d57600080fd5b3661009c57005b600080fd5b3480156100ad57600080fd5b506004546100c1906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e957600080fd5b506006546100c1906001600160a01b031681565b34801561010957600080fd5b506002546100c1906001600160a01b031681565b34801561012957600080fd5b506003546100c1906001600160a01b031681565b34801561014957600080fd5b506000546100c1906001600160a01b031681565b34801561016957600080fd5b506100c17f000000000000000000000000000000000000000000000000000000000000000081565b34801561019d57600080fd5b506101b16101ac366004610e8a565b610213565b005b3480156101bf57600080fd5b506005546100c1906001600160a01b031681565b3480156101df57600080fd5b506101b16101ee366004610e8a565b610660565b3480156101ff57600080fd5b506001546100c1906001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461029a5760405162461bcd60e51b815260206004820152602160248201527f416e746944756d7047756172643a2043414c4c45525f4e4f545f464143544f526044820152605960f81b60648201526084015b60405180910390fd5b806000806101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f887ea406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610ebe565b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632cdc1c746040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190610ebe565b600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391cca3db6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610ebe565b600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bf6c21b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610ebe565b600680546001600160a01b0319166001600160a01b0392831617905560005460408051630dfe168160e01b815290519190921691630dfe16819160048083019260209291908290030181865afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190610ebe565b600480546001600160a01b0319166001600160a01b039283161781556000546040805163d21220a760e01b81529051919093169263d21220a792818101926020929091908290030181865afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190610ebe565b600580546001600160a01b0319166001600160a01b039290921691909117905550565b6003546001600160a01b031633148061070557506002546004805460405163f5dab71160e01b81526001600160a01b03918216928101929092529091169063f5dab71190602401600060405180830381865afa1580156106c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ec919081019061111f565b608001516001600160a01b0316336001600160a01b0316145b80610798575060025460055460405163f5dab71160e01b81526001600160a01b03918216600482015291169063f5dab71190602401600060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077f919081019061111f565b608001516001600160a01b0316336001600160a01b0316145b6107f85760405162461bcd60e51b815260206004820152602b60248201527f416e746944756d7047756172643a2043414c4c45525f4e4f545f544f4b454e5f60448201526a2a22a0a6afa7a92fa222ab60a91b6064820152608401610291565b60025460405163f5dab71160e01b81526001600160a01b038381166004830152600092169063f5dab71190602401600060405180830381865afa158015610843573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086b919081019061111f565b60208101516101a081015161018082015161016083015161014090930151939450909290916108999161121f565b6108a3919061121f565b6108ad919061121f565b6000036108b8575050565b6004546000906001600160a01b038481169116146108e1576004546001600160a01b03166108ee565b6005546001600160a01b03165b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190611245565b60000361096557505050565b600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201526000199185169063dd62ed3e90604401602060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190611245565b14610bc65760015460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529084169063095ea7b3906044016020604051808303816000875af1158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a59919061125e565b5060015460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061125e565b5060005460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529084169063095ea7b3906044016020604051808303816000875af1158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b919061125e565b5060005460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc4919061125e565b505b6000546040516370a0823160e01b81523060048201526001600160a01b039182169163a87db923918491600291908316906370a0823190602401602060405180830381865afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190611245565b610c4b9190611279565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610c9157600080fd5b505af1158015610ca5573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03861691506370a0823190602401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190611245565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d829190611245565b6001549091506001600160a01b0316639d6fdd9386858585610da64261025861121f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482015260a401600060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b5050604080516001600160a01b03808816825289166020820152908101849052606081018590527fd76c14b65d892518c063a34134624fca1ed5d6108e326bd744fd7e29e2ccd75d9250608001905060405180910390a1505050505b50565b6001600160a01b0381168114610e7257600080fd5b600060208284031215610e9c57600080fd5b8135610ea781610e75565b9392505050565b8051610eb981610e75565b919050565b600060208284031215610ed057600080fd5b8151610ea781610e75565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715610f1557610f15610edb565b60405290565b604051610120810167ffffffffffffffff81118282101715610f1557610f15610edb565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f6857610f68610edb565b604052919050565b600060408284031215610f8257600080fd5b6040516040810181811067ffffffffffffffff82111715610fa557610fa5610edb565b604052825181526020928301519281019290925250919050565b60006101c08284031215610fd257600080fd5b610fda610ef1565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101608083015181830152506101808083015181830152506101a080830151818301525092915050565b805160038110610eb957600080fd5b80518015158114610eb957600080fd5b600082601f8301126110a457600080fd5b815167ffffffffffffffff8111156110be576110be610edb565b60206110d2601f8301601f19168201610f3f565b82815285828487010111156110e657600080fd5b60005b838110156111045785810183015182820184015282016110e9565b838111156111155760008385840101525b5095945050505050565b60006020828403121561113157600080fd5b815167ffffffffffffffff8082111561114957600080fd5b908301906102e0828603121561115e57600080fd5b611166610f1b565b6111708684610f70565b815261117f8660408501610fbf565b60208201526111916102008401611074565b60408201526111a36102208401610eae565b60608201526111b56102408401610eae565b60808201526111c76102608401610eae565b60a08201526111d96102808401611083565b60c08201526111eb6102a08401611083565b60e08201526102c08301518281111561120357600080fd5b61120f87828601611093565b6101008301525095945050505050565b6000821982111561124057634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561125757600080fd5b5051919050565b60006020828403121561127057600080fd5b610ea782611083565b60008261129657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c406b9ab732e991f28edf5ded85006f6d21b6a1bb87d8716aeec079778f370fb64736f6c634300080e0033";

type AntiDumpGuardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AntiDumpGuardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AntiDumpGuard__factory extends ContractFactory {
  constructor(...args: AntiDumpGuardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AntiDumpGuard> {
    return super.deploy(overrides || {}) as Promise<AntiDumpGuard>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AntiDumpGuard {
    return super.attach(address) as AntiDumpGuard;
  }
  override connect(signer: Signer): AntiDumpGuard__factory {
    return super.connect(signer) as AntiDumpGuard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AntiDumpGuardInterface {
    return new utils.Interface(_abi) as AntiDumpGuardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AntiDumpGuard {
    return new Contract(address, _abi, signerOrProvider) as AntiDumpGuard;
  }
}
