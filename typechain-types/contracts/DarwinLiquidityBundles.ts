/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DarwinLiquidityBundlesInterface extends utils.Interface {
  functions: {
    "LOCK_PERIOD()": FunctionFragment;
    "WETH()": FunctionFragment;
    "darwinFactory()": FunctionFragment;
    "darwinRouter()": FunctionFragment;
    "enterBundle(address,uint256)": FunctionFragment;
    "exitBundle(address)": FunctionFragment;
    "harvestAndRelock(address)": FunctionFragment;
    "holdings(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingDarwin(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakeBundleInMasterChef(address)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "totalLpAmount(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LOCK_PERIOD"
      | "WETH"
      | "darwinFactory"
      | "darwinRouter"
      | "enterBundle"
      | "exitBundle"
      | "harvestAndRelock"
      | "holdings"
      | "initialize"
      | "masterChef"
      | "owner"
      | "pendingDarwin"
      | "renounceOwnership"
      | "stakeBundleInMasterChef"
      | "tokenInfo"
      | "totalLpAmount"
      | "transferOwnership"
      | "update"
      | "userInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "darwinFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "darwinRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterBundle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitBundle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAndRelock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "holdings",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDarwin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBundleInMasterChef",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLpAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "darwinFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "darwinRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitBundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestAndRelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeBundleInMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "EnterBundle(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ExitBundle(address,uint256,uint256,uint256)": EventFragment;
    "HarvestAndRelock(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeInMasterchef(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestAndRelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeInMasterchef"): EventFragment;
}

export interface EnterBundleEventObject {
  user: string;
  amountToken: BigNumber;
  amountETH: BigNumber;
  timestamp: BigNumber;
  lockEnd: BigNumber;
}
export type EnterBundleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  EnterBundleEventObject
>;

export type EnterBundleEventFilter = TypedEventFilter<EnterBundleEvent>;

export interface ExitBundleEventObject {
  user: string;
  amountToken: BigNumber;
  amountETH: BigNumber;
  timestamp: BigNumber;
}
export type ExitBundleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExitBundleEventObject
>;

export type ExitBundleEventFilter = TypedEventFilter<ExitBundleEvent>;

export interface HarvestAndRelockEventObject {
  user: string;
  amountDarwin: BigNumber;
  timestamp: BigNumber;
}
export type HarvestAndRelockEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HarvestAndRelockEventObject
>;

export type HarvestAndRelockEventFilter =
  TypedEventFilter<HarvestAndRelockEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakeInMasterchefEventObject {
  user: string;
  liquidity: BigNumber;
  timestamp: BigNumber;
}
export type StakeInMasterchefEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeInMasterchefEventObject
>;

export type StakeInMasterchefEventFilter =
  TypedEventFilter<StakeInMasterchefEvent>;

export interface DarwinLiquidityBundles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DarwinLiquidityBundlesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    darwinFactory(overrides?: CallOverrides): Promise<[string]>;

    darwinRouter(overrides?: CallOverrides): Promise<[string]>;

    enterBundle(
      _token: PromiseOrValue<string>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitBundle(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestAndRelock(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    holdings(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { eth: BigNumber; token: BigNumber }>;

    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingDarwin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeBundleInMasterChef(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        priceInWeth: BigNumber;
      }
    >;

    totalLpAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lpAmount: BigNumber;
        lockEnd: BigNumber;
        bundledEth: BigNumber;
        bundledToken: BigNumber;
        inMasterchef: boolean;
      }
    >;
  };

  LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  darwinFactory(overrides?: CallOverrides): Promise<string>;

  darwinRouter(overrides?: CallOverrides): Promise<string>;

  enterBundle(
    _token: PromiseOrValue<string>,
    _desiredTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitBundle(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestAndRelock(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  holdings(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { eth: BigNumber; token: BigNumber }>;

  initialize(
    _darwinRouter: PromiseOrValue<string>,
    _masterChef: PromiseOrValue<string>,
    _WETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingDarwin(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeBundleInMasterChef(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenInfo(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenAmount: BigNumber; priceInWeth: BigNumber }
  >;

  totalLpAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      lpAmount: BigNumber;
      lockEnd: BigNumber;
      bundledEth: BigNumber;
      bundledToken: BigNumber;
      inMasterchef: boolean;
    }
  >;

  callStatic: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    darwinFactory(overrides?: CallOverrides): Promise<string>;

    darwinRouter(overrides?: CallOverrides): Promise<string>;

    enterBundle(
      _token: PromiseOrValue<string>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitBundle(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestAndRelock(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    holdings(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { eth: BigNumber; token: BigNumber }>;

    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingDarwin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stakeBundleInMasterChef(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        priceInWeth: BigNumber;
      }
    >;

    totalLpAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lpAmount: BigNumber;
        lockEnd: BigNumber;
        bundledEth: BigNumber;
        bundledToken: BigNumber;
        inMasterchef: boolean;
      }
    >;
  };

  filters: {
    "EnterBundle(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null,
      lockEnd?: null
    ): EnterBundleEventFilter;
    EnterBundle(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null,
      lockEnd?: null
    ): EnterBundleEventFilter;

    "ExitBundle(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null
    ): ExitBundleEventFilter;
    ExitBundle(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null
    ): ExitBundleEventFilter;

    "HarvestAndRelock(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountDarwin?: null,
      timestamp?: null
    ): HarvestAndRelockEventFilter;
    HarvestAndRelock(
      user?: PromiseOrValue<string> | null,
      amountDarwin?: null,
      timestamp?: null
    ): HarvestAndRelockEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StakeInMasterchef(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      liquidity?: null,
      timestamp?: null
    ): StakeInMasterchefEventFilter;
    StakeInMasterchef(
      user?: PromiseOrValue<string> | null,
      liquidity?: null,
      timestamp?: null
    ): StakeInMasterchefEventFilter;
  };

  estimateGas: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    darwinFactory(overrides?: CallOverrides): Promise<BigNumber>;

    darwinRouter(overrides?: CallOverrides): Promise<BigNumber>;

    enterBundle(
      _token: PromiseOrValue<string>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitBundle(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestAndRelock(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    holdings(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDarwin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeBundleInMasterChef(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLpAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    darwinFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    darwinRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterBundle(
      _token: PromiseOrValue<string>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitBundle(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestAndRelock(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    holdings(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDarwin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeBundleInMasterChef(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLpAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
