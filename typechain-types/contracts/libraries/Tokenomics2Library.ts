/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDarwinSwapLister {
  export type TokenomicsInfoStruct = {
    tokenA1TaxOnSell: PromiseOrValue<BigNumberish>;
    tokenB1TaxOnSell: PromiseOrValue<BigNumberish>;
    tokenA1TaxOnBuy: PromiseOrValue<BigNumberish>;
    tokenB1TaxOnBuy: PromiseOrValue<BigNumberish>;
    tokenA2TaxOnSell: PromiseOrValue<BigNumberish>;
    tokenB2TaxOnSell: PromiseOrValue<BigNumberish>;
    tokenA2TaxOnBuy: PromiseOrValue<BigNumberish>;
    tokenB2TaxOnBuy: PromiseOrValue<BigNumberish>;
    refundOnSell: PromiseOrValue<BigNumberish>;
    refundOnBuy: PromiseOrValue<BigNumberish>;
    tokenB1SellToLI: PromiseOrValue<BigNumberish>;
    tokenB1BuyToLI: PromiseOrValue<BigNumberish>;
    tokenB2SellToLI: PromiseOrValue<BigNumberish>;
    tokenB2BuyToLI: PromiseOrValue<BigNumberish>;
  };

  export type TokenomicsInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenA1TaxOnSell: BigNumber;
    tokenB1TaxOnSell: BigNumber;
    tokenA1TaxOnBuy: BigNumber;
    tokenB1TaxOnBuy: BigNumber;
    tokenA2TaxOnSell: BigNumber;
    tokenB2TaxOnSell: BigNumber;
    tokenA2TaxOnBuy: BigNumber;
    tokenB2TaxOnBuy: BigNumber;
    refundOnSell: BigNumber;
    refundOnBuy: BigNumber;
    tokenB1SellToLI: BigNumber;
    tokenB1BuyToLI: BigNumber;
    tokenB2SellToLI: BigNumber;
    tokenB2BuyToLI: BigNumber;
  };

  export type OwnTokenomicsInfoStruct = {
    tokenTaxOnSell: PromiseOrValue<BigNumberish>;
    tokenTaxOnBuy: PromiseOrValue<BigNumberish>;
  };

  export type OwnTokenomicsInfoStructOutput = [BigNumber, BigNumber] & {
    tokenTaxOnSell: BigNumber;
    tokenTaxOnBuy: BigNumber;
  };

  export type TokenInfoStruct = {
    ownToks: IDarwinSwapLister.OwnTokenomicsInfoStruct;
    addedToks: IDarwinSwapLister.TokenomicsInfoStruct;
    status: PromiseOrValue<BigNumberish>;
    validator: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    feeReceiver: PromiseOrValue<string>;
    valid: PromiseOrValue<boolean>;
    official: PromiseOrValue<boolean>;
    purpose: PromiseOrValue<string>;
    unlockTime: PromiseOrValue<BigNumberish>;
  };

  export type TokenInfoStructOutput = [
    IDarwinSwapLister.OwnTokenomicsInfoStructOutput,
    IDarwinSwapLister.TokenomicsInfoStructOutput,
    number,
    string,
    string,
    string,
    boolean,
    boolean,
    string,
    BigNumber
  ] & {
    ownToks: IDarwinSwapLister.OwnTokenomicsInfoStructOutput;
    addedToks: IDarwinSwapLister.TokenomicsInfoStructOutput;
    status: number;
    validator: string;
    owner: string;
    feeReceiver: string;
    valid: boolean;
    official: boolean;
    purpose: string;
    unlockTime: BigNumber;
  };
}

export interface Tokenomics2LibraryInterface extends utils.Interface {
  functions: {
    "adjustTokenomics((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "ensureTokenomics(((uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,address,address,address,bool,bool,string,uint256),uint256,uint256,uint256)": FunctionFragment;
    "handleLIRefill(address,address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustTokenomics"
      | "ensureTokenomics"
      | "handleLIRefill"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustTokenomics",
    values: [IDarwinSwapLister.TokenomicsInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureTokenomics",
    values: [
      IDarwinSwapLister.TokenInfoStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleLIRefill",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustTokenomics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureTokenomics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleLIRefill",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Tokenomics2Library extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Tokenomics2LibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustTokenomics(
      addedToks: IDarwinSwapLister.TokenomicsInfoStruct,
      overrides?: CallOverrides
    ): Promise<
      [IDarwinSwapLister.TokenomicsInfoStructOutput] & {
        returnToks: IDarwinSwapLister.TokenomicsInfoStructOutput;
      }
    >;

    ensureTokenomics(
      tokInfo: IDarwinSwapLister.TokenInfoStruct,
      maxTok1Tax: PromiseOrValue<BigNumberish>,
      maxTok2Tax: PromiseOrValue<BigNumberish>,
      maxTotalTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    handleLIRefill(
      antiDumpToken: PromiseOrValue<string>,
      otherToken: PromiseOrValue<string>,
      factory: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      otherTokenB2OtherToLI: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refill: BigNumber }>;
  };

  adjustTokenomics(
    addedToks: IDarwinSwapLister.TokenomicsInfoStruct,
    overrides?: CallOverrides
  ): Promise<IDarwinSwapLister.TokenomicsInfoStructOutput>;

  ensureTokenomics(
    tokInfo: IDarwinSwapLister.TokenInfoStruct,
    maxTok1Tax: PromiseOrValue<BigNumberish>,
    maxTok2Tax: PromiseOrValue<BigNumberish>,
    maxTotalTax: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  handleLIRefill(
    antiDumpToken: PromiseOrValue<string>,
    otherToken: PromiseOrValue<string>,
    factory: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    otherTokenB2OtherToLI: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    adjustTokenomics(
      addedToks: IDarwinSwapLister.TokenomicsInfoStruct,
      overrides?: CallOverrides
    ): Promise<IDarwinSwapLister.TokenomicsInfoStructOutput>;

    ensureTokenomics(
      tokInfo: IDarwinSwapLister.TokenInfoStruct,
      maxTok1Tax: PromiseOrValue<BigNumberish>,
      maxTok2Tax: PromiseOrValue<BigNumberish>,
      maxTotalTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    handleLIRefill(
      antiDumpToken: PromiseOrValue<string>,
      otherToken: PromiseOrValue<string>,
      factory: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      otherTokenB2OtherToLI: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    adjustTokenomics(
      addedToks: IDarwinSwapLister.TokenomicsInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureTokenomics(
      tokInfo: IDarwinSwapLister.TokenInfoStruct,
      maxTok1Tax: PromiseOrValue<BigNumberish>,
      maxTok2Tax: PromiseOrValue<BigNumberish>,
      maxTotalTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleLIRefill(
      antiDumpToken: PromiseOrValue<string>,
      otherToken: PromiseOrValue<string>,
      factory: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      otherTokenB2OtherToLI: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustTokenomics(
      addedToks: IDarwinSwapLister.TokenomicsInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureTokenomics(
      tokInfo: IDarwinSwapLister.TokenInfoStruct,
      maxTok1Tax: PromiseOrValue<BigNumberish>,
      maxTok2Tax: PromiseOrValue<BigNumberish>,
      maxTotalTax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleLIRefill(
      antiDumpToken: PromiseOrValue<string>,
      otherToken: PromiseOrValue<string>,
      factory: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      otherTokenB2OtherToLI: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
