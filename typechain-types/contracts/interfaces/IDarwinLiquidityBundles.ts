/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IDarwinLiquidityBundlesInterface extends utils.Interface {
  functions: {
    "initialize(address,address,address)": FunctionFragment;
    "update(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "initialize" | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "EnterBundle(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ExitBundle(address,uint256,uint256,uint256)": EventFragment;
    "HarvestAndRelock(address,uint256,uint256)": EventFragment;
    "StakeInMasterchef(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestAndRelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeInMasterchef"): EventFragment;
}

export interface EnterBundleEventObject {
  user: string;
  amountToken: BigNumber;
  amountETH: BigNumber;
  timestamp: BigNumber;
  lockEnd: BigNumber;
}
export type EnterBundleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  EnterBundleEventObject
>;

export type EnterBundleEventFilter = TypedEventFilter<EnterBundleEvent>;

export interface ExitBundleEventObject {
  user: string;
  amountToken: BigNumber;
  amountETH: BigNumber;
  timestamp: BigNumber;
}
export type ExitBundleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ExitBundleEventObject
>;

export type ExitBundleEventFilter = TypedEventFilter<ExitBundleEvent>;

export interface HarvestAndRelockEventObject {
  user: string;
  amountDarwin: BigNumber;
  timestamp: BigNumber;
}
export type HarvestAndRelockEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HarvestAndRelockEventObject
>;

export type HarvestAndRelockEventFilter =
  TypedEventFilter<HarvestAndRelockEvent>;

export interface StakeInMasterchefEventObject {
  user: string;
  liquidity: BigNumber;
  timestamp: BigNumber;
}
export type StakeInMasterchefEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeInMasterchefEventObject
>;

export type StakeInMasterchefEventFilter =
  TypedEventFilter<StakeInMasterchefEvent>;

export interface IDarwinLiquidityBundles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinLiquidityBundlesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    _darwinRouter: PromiseOrValue<string>,
    _masterChef: PromiseOrValue<string>,
    _WETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EnterBundle(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null,
      lockEnd?: null
    ): EnterBundleEventFilter;
    EnterBundle(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null,
      lockEnd?: null
    ): EnterBundleEventFilter;

    "ExitBundle(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null
    ): ExitBundleEventFilter;
    ExitBundle(
      user?: PromiseOrValue<string> | null,
      amountToken?: null,
      amountETH?: null,
      timestamp?: null
    ): ExitBundleEventFilter;

    "HarvestAndRelock(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountDarwin?: null,
      timestamp?: null
    ): HarvestAndRelockEventFilter;
    HarvestAndRelock(
      user?: PromiseOrValue<string> | null,
      amountDarwin?: null,
      timestamp?: null
    ): HarvestAndRelockEventFilter;

    "StakeInMasterchef(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      liquidity?: null,
      timestamp?: null
    ): StakeInMasterchefEventFilter;
    StakeInMasterchef(
      user?: PromiseOrValue<string> | null,
      liquidity?: null,
      timestamp?: null
    ): StakeInMasterchefEventFilter;
  };

  estimateGas: {
    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _darwinRouter: PromiseOrValue<string>,
      _masterChef: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
