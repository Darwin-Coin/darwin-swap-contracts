/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IDarwinMasterChef {
  export type PoolInfoStruct = {
    lpToken: PromiseOrValue<string>;
    allocPoint: PromiseOrValue<BigNumberish>;
    lastRewardTime: PromiseOrValue<BigNumberish>;
    accDarwinPerShare: PromiseOrValue<BigNumberish>;
    depositFeeBP: PromiseOrValue<BigNumberish>;
    withdrawFeeBP: PromiseOrValue<BigNumberish>;
    harvestInterval: PromiseOrValue<BigNumberish>;
  };

  export type PoolInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber
  ] & {
    lpToken: string;
    allocPoint: BigNumber;
    lastRewardTime: BigNumber;
    accDarwinPerShare: BigNumber;
    depositFeeBP: number;
    withdrawFeeBP: number;
    harvestInterval: BigNumber;
  };

  export type UserInfoStruct = {
    amount: PromiseOrValue<BigNumberish>;
    rewardDebt: PromiseOrValue<BigNumberish>;
    rewardLockedUp: PromiseOrValue<BigNumberish>;
    nextHarvestUntil: PromiseOrValue<BigNumberish>;
    lockedAmount: PromiseOrValue<BigNumberish>;
    lockEnd: PromiseOrValue<BigNumberish>;
  };

  export type UserInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    rewardDebt: BigNumber;
    rewardLockedUp: BigNumber;
    nextHarvestUntil: BigNumber;
    lockedAmount: BigNumber;
    lockEnd: BigNumber;
  };
}

export interface IDarwinMasterChefInterface extends utils.Interface {
  functions: {
    "darwin()": FunctionFragment;
    "depositByLPToken(address,uint256,bool,uint256)": FunctionFragment;
    "pendingDarwin(uint256,address)": FunctionFragment;
    "poolExistence(address)": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "poolLength()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdrawByLPToken(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "darwin"
      | "depositByLPToken"
      | "pendingDarwin"
      | "poolExistence"
      | "poolInfo"
      | "poolLength"
      | "userInfo"
      | "withdrawByLPToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "darwin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositByLPToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDarwin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolExistence",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawByLPToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "darwin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositByLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolExistence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawByLPToken",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "RewardLockedUp(address,uint256,uint256)": EventFragment;
    "SetFeeAddress(address,address)": EventFragment;
    "StartTimeChanged(uint256,uint256)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardLockedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface RewardLockedUpEventObject {
  user: string;
  pid: BigNumber;
  amountLockedUp: BigNumber;
}
export type RewardLockedUpEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardLockedUpEventObject
>;

export type RewardLockedUpEventFilter = TypedEventFilter<RewardLockedUpEvent>;

export interface SetFeeAddressEventObject {
  user: string;
  newAddress: string;
}
export type SetFeeAddressEvent = TypedEvent<
  [string, string],
  SetFeeAddressEventObject
>;

export type SetFeeAddressEventFilter = TypedEventFilter<SetFeeAddressEvent>;

export interface StartTimeChangedEventObject {
  oldStartTime: BigNumber;
  newStartTime: BigNumber;
}
export type StartTimeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartTimeChangedEventObject
>;

export type StartTimeChangedEventFilter =
  TypedEventFilter<StartTimeChangedEvent>;

export interface UpdateEmissionRateEventObject {
  user: string;
  newEmissionRate: BigNumber;
}
export type UpdateEmissionRateEvent = TypedEvent<
  [string, BigNumber],
  UpdateEmissionRateEventObject
>;

export type UpdateEmissionRateEventFilter =
  TypedEventFilter<UpdateEmissionRateEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IDarwinMasterChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinMasterChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    darwin(overrides?: CallOverrides): Promise<[string]>;

    depositByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _lock: PromiseOrValue<boolean>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingDarwin(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolExistence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<[IDarwinMasterChef.PoolInfoStructOutput[]]>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IDarwinMasterChef.UserInfoStructOutput]>;

    withdrawByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  darwin(overrides?: CallOverrides): Promise<string>;

  depositByLPToken(
    lpToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _lock: PromiseOrValue<boolean>,
    _lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingDarwin(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolExistence(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<IDarwinMasterChef.PoolInfoStructOutput[]>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IDarwinMasterChef.UserInfoStructOutput>;

  withdrawByLPToken(
    lpToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    darwin(overrides?: CallOverrides): Promise<string>;

    depositByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _lock: PromiseOrValue<boolean>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingDarwin(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExistence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<IDarwinMasterChef.PoolInfoStructOutput[]>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IDarwinMasterChef.UserInfoStructOutput>;

    withdrawByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "RewardLockedUp(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null
    ): RewardLockedUpEventFilter;
    RewardLockedUp(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null
    ): RewardLockedUpEventFilter;

    "SetFeeAddress(address,address)"(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetFeeAddressEventFilter;
    SetFeeAddress(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetFeeAddressEventFilter;

    "StartTimeChanged(uint256,uint256)"(
      oldStartTime?: null,
      newStartTime?: null
    ): StartTimeChangedEventFilter;
    StartTimeChanged(
      oldStartTime?: null,
      newStartTime?: null
    ): StartTimeChangedEventFilter;

    "UpdateEmissionRate(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newEmissionRate?: null
    ): UpdateEmissionRateEventFilter;
    UpdateEmissionRate(
      user?: PromiseOrValue<string> | null,
      newEmissionRate?: null
    ): UpdateEmissionRateEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    darwin(overrides?: CallOverrides): Promise<BigNumber>;

    depositByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _lock: PromiseOrValue<boolean>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingDarwin(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolExistence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    darwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _lock: PromiseOrValue<boolean>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingDarwin(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolExistence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawByLPToken(
      lpToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
