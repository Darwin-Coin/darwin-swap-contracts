/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IDarwinMasterChefInterface extends utils.Interface {
  functions: {};

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "RewardLockedUp(address,uint256,uint256)": EventFragment;
    "SetFeeAddress(address,address)": EventFragment;
    "StartTimeChanged(uint256,uint256)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardLockedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface RewardLockedUpEventObject {
  user: string;
  pid: BigNumber;
  amountLockedUp: BigNumber;
}
export type RewardLockedUpEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardLockedUpEventObject
>;

export type RewardLockedUpEventFilter = TypedEventFilter<RewardLockedUpEvent>;

export interface SetFeeAddressEventObject {
  user: string;
  newAddress: string;
}
export type SetFeeAddressEvent = TypedEvent<
  [string, string],
  SetFeeAddressEventObject
>;

export type SetFeeAddressEventFilter = TypedEventFilter<SetFeeAddressEvent>;

export interface StartTimeChangedEventObject {
  oldStartTime: BigNumber;
  newStartTime: BigNumber;
}
export type StartTimeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartTimeChangedEventObject
>;

export type StartTimeChangedEventFilter =
  TypedEventFilter<StartTimeChangedEvent>;

export interface UpdateEmissionRateEventObject {
  user: string;
  newEmissionRate: BigNumber;
}
export type UpdateEmissionRateEvent = TypedEvent<
  [string, BigNumber],
  UpdateEmissionRateEventObject
>;

export type UpdateEmissionRateEventFilter =
  TypedEventFilter<UpdateEmissionRateEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IDarwinMasterChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinMasterChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "RewardLockedUp(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null
    ): RewardLockedUpEventFilter;
    RewardLockedUp(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null
    ): RewardLockedUpEventFilter;

    "SetFeeAddress(address,address)"(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetFeeAddressEventFilter;
    SetFeeAddress(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetFeeAddressEventFilter;

    "StartTimeChanged(uint256,uint256)"(
      oldStartTime?: null,
      newStartTime?: null
    ): StartTimeChangedEventFilter;
    StartTimeChanged(
      oldStartTime?: null,
      newStartTime?: null
    ): StartTimeChangedEventFilter;

    "UpdateEmissionRate(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newEmissionRate?: null
    ): UpdateEmissionRateEventFilter;
    UpdateEmissionRate(
      user?: PromiseOrValue<string> | null,
      newEmissionRate?: null
    ): UpdateEmissionRateEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
