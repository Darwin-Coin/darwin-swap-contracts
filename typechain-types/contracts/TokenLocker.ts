/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ITokenLocker {
  export type LockedTokenStruct = {
    locker: PromiseOrValue<string>;
    endTime: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockedTokenStructOutput = [string, BigNumber, BigNumber] & {
    locker: string;
    endTime: BigNumber;
    amount: BigNumber;
  };
}

export interface TokenLockerInterface extends utils.Interface {
  functions: {
    "lockToken(address,address,uint256,uint256)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "userLockedToken(address,address)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "lockToken"
      | "masterChef"
      | "userLockedToken"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lockToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userLockedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userLockedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "LockAmountIncreased(address,address,uint256)": EventFragment;
    "LockDurationIncreased(address,address,uint256)": EventFragment;
    "TokenLocked(address,address,uint256,uint256)": EventFragment;
    "TokenWithdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockAmountIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockDurationIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
}

export interface LockAmountIncreasedEventObject {
  user: string;
  token: string;
  amountIncreased: BigNumber;
}
export type LockAmountIncreasedEvent = TypedEvent<
  [string, string, BigNumber],
  LockAmountIncreasedEventObject
>;

export type LockAmountIncreasedEventFilter =
  TypedEventFilter<LockAmountIncreasedEvent>;

export interface LockDurationIncreasedEventObject {
  user: string;
  token: string;
  durationIncreased: BigNumber;
}
export type LockDurationIncreasedEvent = TypedEvent<
  [string, string, BigNumber],
  LockDurationIncreasedEventObject
>;

export type LockDurationIncreasedEventFilter =
  TypedEventFilter<LockDurationIncreasedEvent>;

export interface TokenLockedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  duration: BigNumber;
}
export type TokenLockedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenLockedEventObject
>;

export type TokenLockedEventFilter = TypedEventFilter<TokenLockedEvent>;

export interface TokenWithdrawnEventObject {
  user: string;
  token: string;
  amount: BigNumber;
}
export type TokenWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  TokenWithdrawnEventObject
>;

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;

export interface TokenLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lockToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    userLockedToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ITokenLocker.LockedTokenStructOutput]>;

    withdrawToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  lockToken(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  userLockedToken(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ITokenLocker.LockedTokenStructOutput>;

  withdrawToken(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lockToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    userLockedToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ITokenLocker.LockedTokenStructOutput>;

    withdrawToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LockAmountIncreased(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amountIncreased?: null
    ): LockAmountIncreasedEventFilter;
    LockAmountIncreased(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amountIncreased?: null
    ): LockAmountIncreasedEventFilter;

    "LockDurationIncreased(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      durationIncreased?: null
    ): LockDurationIncreasedEventFilter;
    LockDurationIncreased(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      durationIncreased?: null
    ): LockDurationIncreasedEventFilter;

    "TokenLocked(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      duration?: null
    ): TokenLockedEventFilter;
    TokenLocked(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      duration?: null
    ): TokenLockedEventFilter;

    "TokenWithdrawn(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawnEventFilter;
    TokenWithdrawn(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawnEventFilter;
  };

  estimateGas: {
    lockToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    userLockedToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lockToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userLockedToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
